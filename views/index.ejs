<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body id="body">
    <div id="main"></div>
    <a id="btn-start" href="javascript:void(0)">START</a>
    <a id="btn-stop" href="javascript:void(0)">STOP</a>
    <a id="btn-play" href="javascript:void(0)">PLAY</a>
    <br>
    <br>
    <audio id="audio" controls>
      <source src="./audio/sample.mp3" type="audio/mp3">
      このWebブラウザーは音声の再生に対応していません。
    </audio>

    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript">
      var path     = (location.hostname.match('localhost')) ? 'http://localhost:3000/' : 'http://mymusicsync.herokuapp.com/',
          socket   = null,
          mainElem = document.getElementById('main'),
          audio    = document.getElementById('audio'),
          clickEvt = window.ontouchend === null ? 'touchend' : 'click',
          syncAble = true;

      socket = io.connect(path);
      // s      = socket.of('/socket');

      socket.on('connect', function(msg) {
        console.log('connected');
      });

      socket.on('msync', function(state) {
        console.log('sync');
        if (state === 'on') {
          console.log('on');
          audio.load();
          audio.play();
          configVol();
          //document.getElementById('btn-play').click();
        } else if (state === 'off') {
          audio.pause();
        }
      });

      function configVol() {
        var _vol      = 0,
            _velocity = 0.025,
            _dir      = 1;

        syncAble = true;
        changeVol(_vol, _velocity, _dir);
      }

      function changeVol(vol, velocity, dir) {
        if (!syncAble) return;
        setTimeout(function() {
          console.log(vol, dir);
          audio.volume = vol; 
          var tempVol = vol + (velocity * dir);
          if (tempVol < 0 || tempVol > 1) {
            dir *= -1;
            vol = tempVol + (velocity * dir);
          } else {
            vol = tempVol;
          }
          changeVol(vol, velocity, dir);
        }, 100);
      }

      window.addEventListener('resize', function() {
        resizeWindow();
      });

      document.getElementById('btn-start').addEventListener(clickEvt, function() {
        socket.emit('msync', 'on');
      });

      document.getElementById('btn-stop').addEventListener(clickEvt, function() {
        socket.emit('msync', 'off');
      });

      document.getElementById('btn-play').addEventListener(clickEvt, function() {
        audio.load();
        setTimeout(function() {
          audio.play();
        }, 1000);
      });

      audio.addEventListener('pause', function() {
        syncAble = false;
      });

      function resizeWindow() {
        document.body.style.height = window.innerHeight + 'px';
      }

      resizeWindow();
    </script>
  </body>
</html>
